- filters.each do |field|
  - field_name = field.name(I18n.locale)
  - field_class = field_name.parameterize
  .filter-dropdown
    %button.filter-button{'aria-label' => 'Show '+field_name+' filter', 'aria-controls' => field_class+'-filter-popout',
    'aria-expanded' => 'false', type: :button, 'id' => field_class+"-filter-button-popout"}
      = field_name
      %span.expand-symbol
        â–¼

    .filter-popout{class: 'hidden', id: field_class+'-filter-popout'}
      - field.with_type do |type|
        - if [:dropdown, :checkbox].include?(type)
          .row
            .col-12
              - make_scrollable = field.options.size > 10
              .custom-filter-options{:class => make_scrollable ? "scrollable" : ""}
                - field.options.sort.each do |option|
                  - is_colour = field_name == "Colour"
                  .custom-filter-checkbox-container{:class => is_colour ? "colour-checkbox-container" : ""}
                    - if is_colour
                      %div{:class => "colour-swatch colour-" + option.title(I18n.locale).parameterize}
                    %label.custom-filter-checkbox-label
                      - param_name = type == :dropdown ? CustomFieldSearchParams.dropdown_param_name(option.id) : CustomFieldSearchParams.checkbox_param_name(option.id)
                      %span.custom-filter-checkbox-label-text
                        = option.title(I18n.locale)
                      = check_box_tag param_name, "#{option.id}", params[param_name], :id => param_name+"_popout"

      - field.with(:numeric) do
        - min_param = CustomFieldSearchParams.numeric_min_param_name(field.id)
        - max_param = CustomFieldSearchParams.numeric_max_param_name(field.id)
        - min_value = params[min_param]
        - max_value = params[max_param]

        .row
          .col-12
            .custom-filter-title
              = field.name(I18n.locale)
        .row
          .col-12
            .custom-filter-options
              - id = ["range-slider", field.id, "popout"].join("-")
              .range-slider{id: id}
                - range = [field.min, field.max]
                - start = [min_value || field.min, max_value || field.max]
                - labels = ["#custom-filter-min-value-#{id}", "#custom-filter-max-value-#{id}"]
                - fields = ["#nf_min_#{id}", "#nf_max_#{id}"]

                - content_for :extra_javascript do
                  :javascript
                    window.ST.rangeFilter("##{id}", #{range.to_json.html_safe}, #{start.to_json.html_safe}, #{labels.to_json.html_safe}, #{fields.to_json.html_safe}, #{field.allow_decimals})

        .row
          .col-12
            .left
              %span.custom-filter-min-max-title= t(".min")
              %span{id: "custom-filter-min-value-#{id}-popout"}
              %input{type: "hidden", id: "nf_min_#{id}-popout", name: min_param, value: min_value}
            .right
              %span.custom-filter-min-max-title= t(".max")
              %span{id: "custom-filter-max-value-#{id}-popout"}
              %input{type: "hidden", id: "nf_max_#{id}-popout", name: max_param, value: max_value}

      .update
        %button{type: 'submit'}
          Apply filter

